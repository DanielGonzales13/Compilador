
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\010\000\002\004" +
    "\003\000\002\004\004\000\002\003\007\000\002\003\007" +
    "\000\002\003\007\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\005\000\002\003\005\000\002" +
    "\020\007\000\002\021\003\000\002\021\003\000\002\022" +
    "\004\000\002\022\004\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\005\003\000\002\005\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\003\000\002\011\007" +
    "\000\002\011\010\000\002\011\012\000\002\011\011\000" +
    "\002\024\007\000\002\024\010\000\002\014\003\000\002" +
    "\014\005\000\002\015\005\000\002\015\003\000\002\010" +
    "\005\000\002\010\003\000\002\010\003\000\002\012\005" +
    "\000\002\016\010\000\002\016\007\000\002\013\010\000" +
    "\002\017\004\000\002\017\006\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\004\004\001\002\000\004\051\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\052\010\001\002\000\004\053\011\001\002\000" +
    "\020\005\015\010\013\013\017\022\021\023\014\025\016" +
    "\036\022\001\002\000\022\005\015\010\013\013\017\022" +
    "\021\023\014\025\016\036\022\054\170\001\002\000\004" +
    "\036\141\001\002\000\004\036\135\001\002\000\004\051" +
    "\103\001\002\000\004\036\060\001\002\000\004\051\036" +
    "\001\002\000\024\005\uffff\010\uffff\011\uffff\013\uffff\022" +
    "\uffff\023\uffff\025\uffff\036\uffff\054\uffff\001\002\000\004" +
    "\036\032\001\002\000\006\015\026\016\027\001\002\000" +
    "\024\005\ufffa\010\ufffa\011\ufffa\013\ufffa\022\ufffa\023\ufffa" +
    "\025\ufffa\036\ufffa\054\ufffa\001\002\000\024\005\ufff8\010" +
    "\ufff8\011\ufff8\013\ufff8\022\ufff8\023\ufff8\025\ufff8\036\ufff8" +
    "\054\ufff8\001\002\000\024\005\ufff9\010\ufff9\011\ufff9\013" +
    "\ufff9\022\ufff9\023\ufff9\025\ufff9\036\ufff9\054\ufff9\001\002" +
    "\000\004\047\031\001\002\000\004\047\030\001\002\000" +
    "\024\005\ufff6\010\ufff6\011\ufff6\013\ufff6\022\ufff6\023\ufff6" +
    "\025\ufff6\036\ufff6\054\ufff6\001\002\000\024\005\ufff7\010" +
    "\ufff7\011\ufff7\013\ufff7\022\ufff7\023\ufff7\025\ufff7\036\ufff7" +
    "\054\ufff7\001\002\000\004\044\033\001\002\000\004\061" +
    "\034\001\002\000\004\047\035\001\002\000\024\005\ufffd" +
    "\010\ufffd\011\ufffd\013\ufffd\022\ufffd\023\ufffd\025\ufffd\036" +
    "\ufffd\054\ufffd\001\002\000\006\036\041\037\037\001\002" +
    "\000\006\041\044\052\ufff4\001\002\000\004\052\055\001" +
    "\002\000\004\041\044\001\002\000\004\052\ufff3\001\002" +
    "\000\004\052\ufff1\001\002\000\012\036\051\037\050\060" +
    "\047\061\046\001\002\000\006\041\044\052\uffeb\001\002" +
    "\000\022\017\uffea\020\uffea\041\uffea\042\uffea\043\uffea\045" +
    "\uffea\047\uffea\052\uffea\001\002\000\022\017\uffe9\020\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\045\uffe9\047\uffe9\052\uffe9\001" +
    "\002\000\006\041\044\052\uffec\001\002\000\006\041\044" +
    "\052\uffed\001\002\000\004\052\uffef\001\002\000\004\052" +
    "\ufff0\001\002\000\004\052\uffee\001\002\000\004\047\056" +
    "\001\002\000\024\005\ufff5\010\ufff5\011\ufff5\013\ufff5\022" +
    "\ufff5\023\ufff5\025\ufff5\036\ufff5\054\ufff5\001\002\000\004" +
    "\052\ufff2\001\002\000\004\044\061\001\002\000\012\036" +
    "\066\051\062\060\047\061\046\001\002\000\012\036\066" +
    "\051\062\060\047\061\046\001\002\000\022\017\uffd7\020" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\045\uffd7\047\uffd7\052\uffd7" +
    "\001\002\000\016\041\uffe3\042\uffe3\043\uffe3\045\uffe3\047" +
    "\uffe3\052\uffe3\001\002\000\010\041\074\042\075\047\076" +
    "\001\002\000\022\017\uffd6\020\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\045\uffd6\047\uffd6\052\uffd6\001\002\000\016\041\uffe6" +
    "\042\uffe6\043\071\045\070\047\uffe6\052\uffe6\001\002\000" +
    "\012\036\066\051\062\060\047\061\046\001\002\000\012" +
    "\036\066\051\062\060\047\061\046\001\002\000\016\041" +
    "\uffe4\042\uffe4\043\uffe4\045\uffe4\047\uffe4\052\uffe4\001\002" +
    "\000\016\041\uffe5\042\uffe5\043\uffe5\045\uffe5\047\uffe5\052" +
    "\uffe5\001\002\000\012\036\066\051\062\060\047\061\046" +
    "\001\002\000\012\036\066\051\062\060\047\061\046\001" +
    "\002\000\024\005\ufffb\010\ufffb\011\ufffb\013\ufffb\022\ufffb" +
    "\023\ufffb\025\ufffb\036\ufffb\054\ufffb\001\002\000\016\041" +
    "\uffe7\042\uffe7\043\071\045\070\047\uffe7\052\uffe7\001\002" +
    "\000\016\041\uffe8\042\uffe8\043\071\045\070\047\uffe8\052" +
    "\uffe8\001\002\000\010\041\074\042\075\052\102\001\002" +
    "\000\022\017\uffd8\020\uffd8\041\uffd8\042\uffd8\043\uffd8\045" +
    "\uffd8\047\uffd8\052\uffd8\001\002\000\014\014\105\036\066" +
    "\051\062\060\047\061\046\001\002\000\004\052\114\001" +
    "\002\000\006\017\uffd9\052\uffd9\001\002\000\004\020\112" +
    "\001\002\000\006\017\110\052\uffdc\001\002\000\014\014" +
    "\105\036\066\051\062\060\047\061\046\001\002\000\004" +
    "\052\uffdb\001\002\000\012\036\066\051\062\060\047\061" +
    "\046\001\002\000\006\017\uffda\052\uffda\001\002\000\004" +
    "\053\116\001\002\000\030\005\uffe2\006\123\007\122\010" +
    "\uffe2\011\uffe2\013\uffe2\022\uffe2\023\uffe2\025\uffe2\036\uffe2" +
    "\054\uffe2\001\002\000\020\005\015\010\013\013\017\022" +
    "\021\023\014\025\016\036\022\001\002\000\022\005\015" +
    "\010\013\013\017\022\021\023\014\025\016\036\022\054" +
    "\120\001\002\000\030\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\013\uffd5\022\uffd5\023\uffd5\025\uffd5\036\uffd5\054" +
    "\uffd5\001\002\000\024\005\ufffe\010\ufffe\011\ufffe\013\ufffe" +
    "\022\ufffe\023\ufffe\025\ufffe\036\ufffe\054\ufffe\001\002\000" +
    "\004\053\116\001\002\000\004\051\127\001\002\000\026" +
    "\005\uffe1\007\125\010\uffe1\011\uffe1\013\uffe1\022\uffe1\023" +
    "\uffe1\025\uffe1\036\uffe1\054\uffe1\001\002\000\004\053\116" +
    "\001\002\000\024\005\uffe0\010\uffe0\011\uffe0\013\uffe0\022" +
    "\uffe0\023\uffe0\025\uffe0\036\uffe0\054\uffe0\001\002\000\014" +
    "\014\105\036\066\051\062\060\047\061\046\001\002\000" +
    "\004\052\131\001\002\000\004\053\116\001\002\000\030" +
    "\005\uffde\006\123\007\uffde\010\uffde\011\uffde\013\uffde\022" +
    "\uffde\023\uffde\025\uffde\036\uffde\054\uffde\001\002\000\026" +
    "\005\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd\022\uffdd\023" +
    "\uffdd\025\uffdd\036\uffdd\054\uffdd\001\002\000\024\005\uffdf" +
    "\010\uffdf\011\uffdf\013\uffdf\022\uffdf\023\uffdf\025\uffdf\036" +
    "\uffdf\054\uffdf\001\002\000\004\044\136\001\002\000\004" +
    "\037\137\001\002\000\004\047\140\001\002\000\024\005" +
    "\ufffc\010\ufffc\011\ufffc\013\ufffc\022\ufffc\023\ufffc\025\ufffc" +
    "\036\ufffc\054\ufffc\001\002\000\004\051\142\001\002\000" +
    "\020\022\150\023\144\024\153\025\145\026\147\027\146" +
    "\052\143\001\002\000\004\053\156\001\002\000\004\036" +
    "\uffcb\001\002\000\004\036\uffce\001\002\000\004\036\uffca" +
    "\001\002\000\004\036\uffcc\001\002\000\004\036\uffcf\001" +
    "\002\000\004\036\164\001\002\000\004\052\154\001\002" +
    "\000\004\036\uffcd\001\002\000\004\053\156\001\002\000" +
    "\024\005\uffd4\010\uffd4\011\uffd4\013\uffd4\022\uffd4\023\uffd4" +
    "\025\uffd4\036\uffd4\054\uffd4\001\002\000\020\005\015\010" +
    "\013\013\017\022\021\023\014\025\016\036\022\001\002" +
    "\000\022\005\015\010\013\011\160\013\017\022\021\023" +
    "\014\025\016\036\022\001\002\000\004\036\161\001\002" +
    "\000\004\047\162\001\002\000\004\054\163\001\002\000" +
    "\024\005\uffd2\010\uffd2\011\uffd2\013\uffd2\022\uffd2\023\uffd2" +
    "\025\uffd2\036\uffd2\054\uffd2\001\002\000\006\046\165\052" +
    "\uffd1\001\002\000\016\022\150\023\144\024\153\025\145" +
    "\026\147\027\146\001\002\000\004\052\uffd0\001\002\000" +
    "\024\005\uffd3\010\uffd3\011\uffd3\013\uffd3\022\uffd3\023\uffd3" +
    "\025\uffd3\036\uffd3\054\uffd3\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\017\004\011\011\024\016\023\020" +
    "\022\001\001\000\012\003\120\011\024\016\023\020\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\037\022\041\001\001\000\004\023\056\001" +
    "\001\000\002\001\001\000\004\023\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\044\001\001\000" +
    "\004\023\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\052\001\001\000\004\023\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\062\006\064\007\066\010\063\001\001" +
    "\000\012\005\062\006\100\007\066\010\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\062\010\072\001" +
    "\001\000\006\005\062\010\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\062\007\077\010\063\001" +
    "\001\000\010\005\062\007\076\010\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\062\010\105\014\103" +
    "\015\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\062\010\105" +
    "\015\110\001\001\000\002\001\001\000\006\005\062\010" +
    "\112\001\001\000\002\001\001\000\004\012\114\001\001" +
    "\000\004\024\123\001\001\000\014\003\017\004\116\011" +
    "\024\016\023\020\022\001\001\000\012\003\120\011\024" +
    "\016\023\020\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\125\001\001\000\002\001\001\000" +
    "\012\005\062\010\105\014\127\015\106\001\001\000\002" +
    "\001\001\000\004\012\131\001\001\000\004\024\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\151\025\150\001\001\000\004" +
    "\013\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\154\001\001\000\002\001\001\000\014\003\017\004\156" +
    "\011\024\016\023\020\022\001\001\000\012\003\120\011" +
    "\024\016\023\020\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\165\025\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= PRINCIPIO par_abierto par_cerrado llave_abierta SENTENCIAS llave_cerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= entero Identificador op_asignacion Numero punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= cadena Identificador op_asignacion cadena_literal punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= decimal Identificador op_asignacion ARITMETIC punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= Identificador incremento punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= Identificador decremento punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IMPRIMIR ::= imprimir par_abierto EXPRESION par_cerrado punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESION ::= cadena_literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESION ::= CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONCATENACION ::= cadena_literal CONCATENACION_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONCATENACION ::= Identificador CONCATENACION_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONCATENACION_AUX ::= op_suma cadena_literal CONCATENACION_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION_AUX",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONCATENACION_AUX ::= op_suma Identificador CONCATENACION_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION_AUX",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONCATENACION_AUX ::= op_suma NUMERO CONCATENACION_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION_AUX",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONCATENACION_AUX ::= op_suma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION_AUX",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONCATENACION_AUX ::= op_suma cadena_literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION_AUX",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONCATENACION_AUX ::= op_suma NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION_AUX",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NUMERO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NUMERO ::= Numero_decimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARITMETIC ::= ARITMETIC op_suma TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETIC",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARITMETIC ::= ARITMETIC op_resta TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETIC",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARITMETIC ::= TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETIC",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TERM ::= TERM op_multiplicacion FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TERM ::= TERM op_division FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TERM ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDICION ::= si par_abierto EXP_LOGICA par_cerrado BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= si par_abierto EXP_LOGICA par_cerrado BLOQUE CONDICION_CONTRARIASI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICION ::= si par_abierto EXP_LOGICA par_cerrado BLOQUE CONDICION_CONTRARIASI contrario BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICION ::= si par_abierto EXP_LOGICA par_cerrado BLOQUE contrario BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICION_CONTRARIASI ::= contrario_si par_abierto EXP_LOGICA par_cerrado BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION_CONTRARIASI",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDICION_CONTRARIASI ::= contrario_si par_abierto EXP_LOGICA par_cerrado BLOQUE CONDICION_CONTRARIASI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION_CONTRARIASI",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP_LOGICA ::= EXP_LOGICA2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP_LOGICA ::= EXP_LOGICA2 operadores_logicos EXP_LOGICA2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP_LOGICA2 ::= FACTOR operadores_comparacion FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA2",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP_LOGICA2 ::= boleana 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP_LOGICA2",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FACTOR ::= par_abierto ARITMETIC par_cerrado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FACTOR ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FACTOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= llave_abierta SENTENCIAS llave_cerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCION ::= funcion Identificador par_abierto PARAMETROS par_cerrado BLOQUEFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION ::= funcion Identificador par_abierto par_cerrado BLOQUEFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUEFUNCION ::= llave_abierta SENTENCIAS retornar Identificador punto_y_coma llave_cerrada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUEFUNCION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARAMETROS ::= TIPO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMETROS ::= TIPO Identificador coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO ::= entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO ::= decimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO ::= flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO ::= boleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
